
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import AST.Node;
import AST.Program;
import AST.TempNode;
import AST.block.Block;
import AST.decleration.StructDecleration;
import AST.decleration.Var_Decleration_Cnt;
import AST.decleration.Var_decleration;
import AST.decleration.fun_dcl.Argument;
import AST.decleration.fun_dcl.FuncDcleration;
import AST.exp.*;
import AST.exp.Assignment.*;
import AST.exp.Binary_op.Binaryop;
import AST.exp.Binary_op.conditional.*;
import AST.exp.Loop.ForEachLoop;
import AST.exp.Loop.ForLoop;
import AST.exp.Loop.RepeatLoop;
import AST.exp.UnryVariableExp.*;
import AST.exp.UnryVariableExp.Not;
import AST.exp.condition.CasePart;
import AST.exp.condition.If;
import AST.exp.condition.SwitchPart;
import AST.exp.constant.*;
import AST.exp.variables.ArrayVariable;
import AST.exp.variables.SimpleVariable;
import AST.exp.variables.VariableDot;
import AST.exp.variables.Variables;
import help.DefinedValues;
import help.HelperFunctions;

import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\004\003" +
    "\000\002\004\003\000\002\006\013\000\002\006\013\000" +
    "\002\006\012\000\002\006\012\000\002\041\002\000\002" +
    "\007\006\000\002\011\007\000\002\011\005\000\002\030" +
    "\005\000\002\030\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\005\012\000\002\031" +
    "\004\000\002\031\002\000\002\003\007\000\002\003\006" +
    "\000\002\032\005\000\002\032\002\000\002\013\005\000" +
    "\002\013\004\000\002\035\006\000\002\035\002\000\002" +
    "\012\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\002\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\005\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\020" +
    "\006\000\002\020\005\000\002\023\003\000\002\023\005" +
    "\000\002\021\011\000\002\021\007\000\002\021\016\000" +
    "\002\034\007\000\002\034\002\000\002\022\013\000\002" +
    "\022\013\000\002\022\012\000\002\022\012\000\002\022" +
    "\012\000\002\022\011\000\002\022\011\000\002\022\011" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\004\000\002" +
    "\015\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\006" +
    "\000\002\014\004\000\002\014\005\000\002\024\003\000" +
    "\002\024\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\040\002\ufffd\006\013\011\017\055\007\057" +
    "\025\061\005\063\011\066\023\067\020\070\004\071\022" +
    "\075\030\101\014\106\027\107\021\001\002\000\026\006" +
    "\013\011\017\055\007\057\025\061\005\063\011\067\020" +
    "\075\030\106\027\107\021\001\002\000\006\006\uffed\014" +
    "\uffed\001\002\000\040\002\ufffd\006\013\011\017\055\007" +
    "\057\025\061\005\063\011\066\023\067\020\070\004\071" +
    "\022\075\030\101\014\106\027\107\021\001\002\000\006" +
    "\006\ufff0\014\ufff0\001\002\000\040\002\ufffb\006\ufffb\011" +
    "\ufffb\055\ufffb\057\ufffb\061\ufffb\063\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\075\ufffb\101\ufffb\106\ufffb\107\ufffb\001" +
    "\002\000\006\006\uffec\014\uffec\001\002\000\004\006\034" +
    "\001\002\000\006\006\uffea\014\uffea\001\002\000\026\006" +
    "\ufff6\011\ufff6\055\ufff6\057\ufff6\061\ufff6\063\ufff6\067\ufff6" +
    "\075\ufff6\106\ufff6\107\ufff6\001\002\000\040\002\ufffc\006" +
    "\ufffc\011\ufffc\055\ufffc\057\ufffc\061\ufffc\063\ufffc\066\ufffc" +
    "\067\ufffc\070\ufffc\071\ufffc\075\ufffc\101\ufffc\106\ufffc\107" +
    "\ufffc\001\002\000\004\002\171\001\002\000\006\006\uffe9" +
    "\014\uffe9\001\002\000\006\006\uffee\014\uffee\001\002\000" +
    "\006\006\uffe7\014\uffe7\001\002\000\004\006\160\001\002" +
    "\000\026\006\013\011\017\055\007\057\025\061\005\063" +
    "\011\067\020\075\030\106\027\107\021\001\002\000\040" +
    "\002\ufffd\006\013\011\017\055\007\057\025\061\005\063" +
    "\011\066\023\067\020\070\004\071\022\075\030\101\014" +
    "\106\027\107\021\001\002\000\006\006\uffef\014\uffef\001" +
    "\002\000\040\002\ufffd\006\013\011\017\055\007\057\025" +
    "\061\005\063\011\066\023\067\020\070\004\071\022\075" +
    "\030\101\014\106\027\107\021\001\002\000\006\006\uffe8" +
    "\014\uffe8\001\002\000\006\006\uffeb\014\uffeb\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\004" +
    "\006\034\001\002\000\012\015\045\017\uffdc\020\uffdc\021" +
    "\043\001\002\000\006\017\uffe0\020\036\001\002\000\004" +
    "\006\034\001\002\000\004\017\040\001\002\000\112\002" +
    "\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\025\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\045\uffe3\046\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\061\uffe3\063\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3\103\uffe3" +
    "\106\uffe3\107\uffe3\110\uffe3\001\002\000\006\017\uffe0\020" +
    "\036\001\002\000\004\017\uffe1\001\002\000\034\006\053" +
    "\007\064\012\065\013\056\025\051\035\054\036\067\037" +
    "\057\040\055\045\052\046\060\073\047\110\062\001\002" +
    "\000\006\017\uffde\020\uffde\001\002\000\034\006\053\007" +
    "\064\012\065\013\056\025\051\035\054\036\067\037\057" +
    "\040\055\045\052\046\060\073\047\110\062\001\002\000" +
    "\054\004\uffb8\005\uffb8\014\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\110\uffb8\111\uffb8\001\002\000\004\013\154\001\002\000" +
    "\046\004\120\005\116\016\152\022\114\023\104\024\112" +
    "\027\103\030\110\031\124\032\102\042\125\043\123\044" +
    "\115\047\107\050\117\051\113\110\121\111\106\001\002" +
    "\000\034\006\053\007\064\012\065\013\056\025\051\035" +
    "\054\036\067\037\057\040\055\045\052\046\060\073\047" +
    "\110\062\001\002\000\054\004\uff95\005\uff95\014\uff95\016" +
    "\uff95\017\uff95\020\uff95\022\uff95\023\uff95\024\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\042\uff95\043\uff95\044\uff95\047" +
    "\uff95\050\uff95\051\uff95\110\uff95\111\uff95\001\002\000\100" +
    "\004\uffdc\005\uffdc\010\uffdc\013\142\014\uffdc\015\045\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\110\uffdc\111\uffdc\001\002\000" +
    "\054\004\uff97\005\uff97\014\uff97\016\uff97\017\uff97\020\uff97" +
    "\022\uff97\023\uff97\024\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\042\uff97\043\uff97\044\uff97\047\uff97\050\uff97\051\uff97" +
    "\110\uff97\111\uff97\001\002\000\004\006\135\001\002\000" +
    "\034\006\053\007\064\012\065\013\056\025\051\035\054" +
    "\036\067\037\057\040\055\045\052\046\060\073\047\110" +
    "\062\001\002\000\054\004\uff94\005\uff94\014\uff94\016\uff94" +
    "\017\uff94\020\uff94\022\uff94\023\uff94\024\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\042\uff94\043\uff94\044\uff94\047\uff94" +
    "\050\uff94\051\uff94\110\uff94\111\uff94\001\002\000\004\006" +
    "\135\001\002\000\054\004\uffb4\005\uffb4\014\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\042\uffb4\043\uffb4\044\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\110\uffb4\111\uffb4\001\002\000\034\006" +
    "\053\007\064\012\065\013\056\025\051\035\054\036\067" +
    "\037\057\040\055\045\052\046\060\073\047\110\062\001" +
    "\002\000\074\004\uffb7\005\uffb7\010\077\014\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\071\022\uffb7\023\uffb7\024\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\070\034\073\040\075" +
    "\041\074\042\uffb7\043\uffb7\044\uffb7\046\076\047\uffb7\050" +
    "\uffb7\051\uffb7\052\072\110\uffb7\111\uffb7\001\002\000\054" +
    "\004\uff98\005\uff98\014\uff98\016\uff98\017\uff98\020\uff98\022" +
    "\uff98\023\uff98\024\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\042\uff98\043\uff98\044\uff98\047\uff98\050\uff98\051\uff98\110" +
    "\uff98\111\uff98\001\002\000\054\004\uff96\005\uff96\014\uff96" +
    "\016\uff96\017\uff96\020\uff96\022\uff96\023\uff96\024\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\042\uff96\043\uff96\044\uff96" +
    "\047\uff96\050\uff96\051\uff96\110\uff96\111\uff96\001\002\000" +
    "\054\004\uffb6\005\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\110\uffb6\111\uffb6\001\002\000\054\004\uff93\005\uff93\014" +
    "\uff93\016\uff93\017\uff93\020\uff93\022\uff93\023\uff93\024\uff93" +
    "\027\uff93\030\uff93\031\uff93\032\uff93\042\uff93\043\uff93\044" +
    "\uff93\047\uff93\050\uff93\051\uff93\110\uff93\111\uff93\001\002" +
    "\000\034\006\053\007\064\012\065\013\056\025\051\035" +
    "\054\036\067\037\057\040\055\045\052\046\060\073\047" +
    "\110\062\001\002\000\034\006\053\007\064\012\065\013" +
    "\056\025\051\035\054\036\067\037\057\040\055\045\052" +
    "\046\060\073\047\110\062\001\002\000\034\006\053\007" +
    "\064\012\065\013\056\025\051\035\054\036\067\037\057" +
    "\040\055\045\052\046\060\073\047\110\062\001\002\000" +
    "\034\006\053\007\064\012\065\013\056\025\051\035\054" +
    "\036\067\037\057\040\055\045\052\046\060\073\047\110" +
    "\062\001\002\000\034\006\053\007\064\012\065\013\056" +
    "\025\051\035\054\036\067\037\057\040\055\045\052\046" +
    "\060\073\047\110\062\001\002\000\054\004\uffb0\005\uffb0" +
    "\014\uffb0\016\uffb0\017\uffb0\020\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\047\uffb0\050\uffb0\051\uffb0\110\uffb0\111\uffb0\001" +
    "\002\000\054\004\uffaf\005\uffaf\014\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\022\uffaf\023\uffaf\024\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\042\uffaf\043\uffaf\044\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\110\uffaf\111\uffaf\001\002\000\004\006\100\001" +
    "\002\000\074\004\uffac\005\uffac\010\uffac\014\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\110\uffac\111\uffac\001\002\000\054" +
    "\004\120\005\116\014\uffce\016\uffce\017\uffce\020\uffce\022" +
    "\114\023\104\024\112\027\103\030\110\031\124\032\102" +
    "\042\125\043\123\044\115\047\107\050\117\051\113\110" +
    "\121\111\106\001\002\000\034\006\uffa5\007\uffa5\012\uffa5" +
    "\013\uffa5\025\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\045" +
    "\uffa5\046\uffa5\073\uffa5\110\uffa5\001\002\000\034\006\uffa4" +
    "\007\uffa4\012\uffa4\013\uffa4\025\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\045\uffa4\046\uffa4\073\uffa4\110\uffa4\001\002" +
    "\000\034\006\uff9d\007\uff9d\012\uff9d\013\uff9d\025\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\045\uff9d\046\uff9d\073\uff9d" +
    "\110\uff9d\001\002\000\034\006\053\007\064\012\065\013" +
    "\056\025\051\035\054\036\067\037\057\040\055\045\052" +
    "\046\060\073\047\110\062\001\002\000\034\006\uffa9\007" +
    "\uffa9\012\uffa9\013\uffa9\025\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\045\uffa9\046\uffa9\073\uffa9\110\uffa9\001\002\000" +
    "\034\006\uffa0\007\uffa0\012\uffa0\013\uffa0\025\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\045\uffa0\046\uffa0\073\uffa0\110" +
    "\uffa0\001\002\000\034\006\uffa3\007\uffa3\012\uffa3\013\uffa3" +
    "\025\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\045\uffa3\046" +
    "\uffa3\073\uffa3\110\uffa3\001\002\000\034\006\uffab\007\uffab" +
    "\012\uffab\013\uffab\025\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\045\uffab\046\uffab\073\uffab\110\uffab\001\002\000\034" +
    "\006\uff99\007\uff99\012\uff99\013\uff99\025\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\045\uff99\046\uff99\073\uff99\110\uff99" +
    "\001\002\000\034\006\uff9a\007\uff9a\012\uff9a\013\uff9a\025" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\045\uff9a\046\uff9a" +
    "\073\uff9a\110\uff9a\001\002\000\034\006\uff9c\007\uff9c\012" +
    "\uff9c\013\uff9c\025\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\045\uff9c\046\uff9c\073\uff9c\110\uff9c\001\002\000\034\006" +
    "\uff9e\007\uff9e\012\uff9e\013\uff9e\025\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\045\uff9e\046\uff9e\073\uff9e\110\uff9e\001" +
    "\002\000\034\006\uffa7\007\uffa7\012\uffa7\013\uffa7\025\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\045\uffa7\046\uffa7\073" +
    "\uffa7\110\uffa7\001\002\000\034\006\uff9b\007\uff9b\012\uff9b" +
    "\013\uff9b\025\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\045" +
    "\uff9b\046\uff9b\073\uff9b\110\uff9b\001\002\000\034\006\uffa6" +
    "\007\uffa6\012\uffa6\013\uffa6\025\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\045\uffa6\046\uffa6\073\uffa6\110\uffa6\001\002" +
    "\000\034\006\uffa8\007\uffa8\012\uffa8\013\uffa8\025\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\045\uffa8\046\uffa8\073\uffa8" +
    "\110\uffa8\001\002\000\034\006\uffaa\007\uffaa\012\uffaa\013" +
    "\uffaa\025\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\045\uffaa" +
    "\046\uffaa\073\uffaa\110\uffaa\001\002\000\034\006\uff9f\007" +
    "\uff9f\012\uff9f\013\uff9f\025\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\045\uff9f\046\uff9f\073\uff9f\110\uff9f\001\002\000" +
    "\034\006\uffa2\007\uffa2\012\uffa2\013\uffa2\025\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\045\uffa2\046\uffa2\073\uffa2\110" +
    "\uffa2\001\002\000\034\006\uffa1\007\uffa1\012\uffa1\013\uffa1" +
    "\025\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\045\uffa1\046" +
    "\uffa1\073\uffa1\110\uffa1\001\002\000\054\004\120\005\116" +
    "\014\uffba\016\uffba\017\uffba\020\uffba\022\114\023\104\024" +
    "\112\027\103\030\110\031\124\032\102\042\125\043\123" +
    "\044\115\047\107\050\117\051\113\110\121\111\106\001" +
    "\002\000\054\004\120\005\116\014\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\022\114\023\104\024\112\027\103\030\110\031" +
    "\124\032\102\042\125\043\123\044\115\047\107\050\117" +
    "\051\113\110\121\111\106\001\002\000\054\004\120\005" +
    "\116\014\uffcf\016\uffcf\017\uffcf\020\uffcf\022\114\023\104" +
    "\024\112\027\103\030\110\031\124\032\102\042\125\043" +
    "\123\044\115\047\107\050\117\051\113\110\121\111\106" +
    "\001\002\000\054\004\120\005\116\014\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\022\114\023\104\024\112\027\103\030\110" +
    "\031\124\032\102\042\125\043\123\044\115\047\107\050" +
    "\117\051\113\110\121\111\106\001\002\000\054\004\120" +
    "\005\116\014\uffcd\016\uffcd\017\uffcd\020\uffcd\022\114\023" +
    "\104\024\112\027\103\030\110\031\124\032\102\042\125" +
    "\043\123\044\115\047\107\050\117\051\113\110\121\111" +
    "\106\001\002\000\054\004\uffb5\005\uffb5\014\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\042\uffb5\043\uffb5\044\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\110\uffb5\111\uffb5\001\002\000\056\004" +
    "\uffb1\005\uffb1\010\077\014\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\110\uffb1\111\uffb1\001\002\000\072\004\uffdc\005\uffdc\010" +
    "\uffdc\014\uffdc\015\045\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\110\uffdc\111\uffdc\001" +
    "\002\000\074\004\uffad\005\uffad\010\uffad\014\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\110\uffad\111\uffad\001\002\000\046" +
    "\004\120\005\116\014\140\022\114\023\104\024\112\027" +
    "\103\030\110\031\124\032\102\042\125\043\123\044\115" +
    "\047\107\050\117\051\113\110\121\111\106\001\002\000" +
    "\054\004\uffb9\005\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\110\uffb9\111\uffb9\001\002\000\056\004\uffb2\005\uffb2\010" +
    "\077\014\uffb2\016\uffb2\017\uffb2\020\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2\110\uffb2\111\uffb2" +
    "\001\002\000\036\006\053\007\064\012\065\013\056\014" +
    "\144\025\051\035\054\036\067\037\057\040\055\045\052" +
    "\046\060\073\047\110\062\001\002\000\050\004\120\005" +
    "\116\014\uffc9\020\147\022\114\023\104\024\112\027\103" +
    "\030\110\031\124\032\102\042\125\043\123\044\115\047" +
    "\107\050\117\051\113\110\121\111\106\001\002\000\054" +
    "\004\uffca\005\uffca\014\uffca\016\uffca\017\uffca\020\uffca\022" +
    "\uffca\023\uffca\024\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\042\uffca\043\uffca\044\uffca\047\uffca\050\uffca\051\uffca\110" +
    "\uffca\111\uffca\001\002\000\004\014\146\001\002\000\054" +
    "\004\uffcb\005\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\047\uffcb\050\uffcb\051\uffcb\110" +
    "\uffcb\111\uffcb\001\002\000\034\006\053\007\064\012\065" +
    "\013\056\025\051\035\054\036\067\037\057\040\055\045" +
    "\052\046\060\073\047\110\062\001\002\000\004\014\uffc8" +
    "\001\002\000\054\004\uffb3\005\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\042\uffb3\043\uffb3\044\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\110\uffb3\111\uffb3\001\002\000\076\004\uffdc" +
    "\005\uffdc\010\uffdc\014\uffdc\015\045\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\110\uffdc\111\uffdc\001\002\000\074\004\uffdd\005" +
    "\uffdd\010\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\110" +
    "\uffdd\111\uffdd\001\002\000\026\006\013\011\017\055\007" +
    "\057\025\061\005\063\011\067\020\075\030\106\027\107" +
    "\021\001\002\000\004\014\156\001\002\000\054\004\uffae" +
    "\005\uffae\014\uffae\016\uffae\017\uffae\020\uffae\022\uffae\023" +
    "\uffae\024\uffae\027\uffae\030\uffae\031\uffae\032\uffae\042\uffae" +
    "\043\uffae\044\uffae\047\uffae\050\uffae\051\uffae\110\uffae\111" +
    "\uffae\001\002\000\050\004\120\005\116\017\uffdf\020\uffdf" +
    "\022\114\023\104\024\112\027\103\030\110\031\124\032" +
    "\102\042\125\043\123\044\115\047\107\050\117\051\113" +
    "\110\121\111\106\001\002\000\004\064\161\001\002\000" +
    "\030\006\013\011\017\055\007\057\025\061\005\063\011" +
    "\066\023\067\020\075\030\106\027\107\021\001\002\000" +
    "\032\006\013\011\017\054\uffe4\055\007\057\025\061\005" +
    "\063\011\066\023\067\020\075\030\106\027\107\021\001" +
    "\002\000\004\054\166\001\002\000\032\006\013\011\017" +
    "\054\uffe4\055\007\057\025\061\005\063\011\066\023\067" +
    "\020\075\030\106\027\107\021\001\002\000\004\054\uffe5" +
    "\001\002\000\004\071\167\001\002\000\004\017\170\001" +
    "\002\000\040\002\uffe6\006\uffe6\011\uffe6\055\uffe6\057\uffe6" +
    "\061\uffe6\063\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\075" +
    "\uffe6\101\uffe6\106\uffe6\107\uffe6\001\002\000\004\002\000" +
    "\001\002\000\026\006\013\011\017\055\007\057\025\061" +
    "\005\063\011\067\020\075\030\106\027\107\021\001\002" +
    "\000\004\006\174\001\002\000\004\013\175\001\002\000" +
    "\030\006\013\011\017\014\200\055\007\057\025\061\005" +
    "\063\011\067\020\075\030\106\027\107\021\001\002\000" +
    "\004\014\340\001\002\000\004\006\331\001\002\000\006" +
    "\017\201\064\202\001\002\000\040\002\ufff6\006\ufff6\011" +
    "\ufff6\055\ufff6\057\ufff6\061\ufff6\063\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\075\ufff6\101\ufff6\106\ufff6\107\ufff6\001" +
    "\002\000\102\006\223\007\064\011\017\012\065\013\056" +
    "\025\051\035\054\036\067\037\057\040\055\045\052\046" +
    "\060\053\211\054\uffd8\055\007\056\210\057\025\061\005" +
    "\063\011\065\215\066\023\067\020\072\214\073\047\074" +
    "\216\075\030\077\217\100\206\103\207\106\027\107\021" +
    "\110\062\001\002\000\040\002\ufff6\006\ufff6\011\ufff6\055" +
    "\ufff6\057\ufff6\061\ufff6\063\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\071\ufff6\075\ufff6\101\ufff6\106\ufff6\107\ufff6\001\002\000" +
    "\040\002\ufff7\006\ufff7\011\ufff7\055\ufff7\057\ufff7\061\ufff7" +
    "\063\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\075\ufff7\101" +
    "\ufff7\106\ufff7\107\ufff7\001\002\000\102\006\223\007\064" +
    "\011\017\012\065\013\056\025\051\035\054\036\067\037" +
    "\057\040\055\045\052\046\060\053\211\054\uffd8\055\007" +
    "\056\210\057\025\061\005\063\011\065\215\066\023\067" +
    "\020\072\214\073\047\074\216\075\030\077\217\100\206" +
    "\103\207\106\027\107\021\110\062\001\002\000\004\017" +
    "\326\001\002\000\004\064\202\001\002\000\004\013\267" +
    "\001\002\000\004\013\261\001\002\000\004\054\260\001" +
    "\002\000\102\006\223\007\064\011\017\012\065\013\056" +
    "\025\051\035\054\036\067\037\057\040\055\045\052\046" +
    "\060\053\211\054\uffd8\055\007\056\210\057\025\061\005" +
    "\063\011\065\215\066\023\067\020\072\214\073\047\074" +
    "\216\075\030\077\217\100\206\103\207\106\027\107\021" +
    "\110\062\001\002\000\036\006\053\007\064\012\065\013" +
    "\056\017\254\025\051\035\054\036\067\037\057\040\055" +
    "\045\052\046\060\073\047\110\062\001\002\000\004\017" +
    "\253\001\002\000\004\013\233\001\002\000\004\013\225" +
    "\001\002\000\102\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\025\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\045\uffd6" +
    "\046\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\061" +
    "\uffd6\063\uffd6\065\uffd6\066\uffd6\067\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\077\uffd6\100\uffd6\103\uffd6\106\uffd6\107" +
    "\uffd6\110\uffd6\001\002\000\102\006\uffd5\007\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\025\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\045\uffd5\046\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\061\uffd5\063\uffd5\065\uffd5\066\uffd5\067\uffd5\072" +
    "\uffd5\073\uffd5\074\uffd5\075\uffd5\077\uffd5\100\uffd5\103\uffd5" +
    "\106\uffd5\107\uffd5\110\uffd5\001\002\000\046\004\120\005" +
    "\116\017\224\022\114\023\104\024\112\027\103\030\110" +
    "\031\124\032\102\042\125\043\123\044\115\047\107\050" +
    "\117\051\113\110\121\111\106\001\002\000\074\004\uffdc" +
    "\005\uffdc\006\uffea\010\uffdc\013\142\015\045\017\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\110\uffdc\111\uffdc\001\002\000\102\006\uffd7\007\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\025\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\045\uffd7\046\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\061\uffd7\063\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\075\uffd7\077\uffd7\100\uffd7\103" +
    "\uffd7\106\uffd7\107\uffd7\110\uffd7\001\002\000\004\006\226" +
    "\001\002\000\004\105\227\001\002\000\004\006\230\001" +
    "\002\000\004\014\231\001\002\000\004\064\202\001\002" +
    "\000\102\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\025" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\045\uffbb\046\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\061\uffbb\063" +
    "\uffbb\065\uffbb\066\uffbb\067\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\077\uffbb\100\uffbb\103\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\001\002\000\034\006\053\007\064\012\065\013\056" +
    "\025\051\035\054\036\067\037\057\040\055\045\052\046" +
    "\060\073\047\110\062\001\002\000\046\004\120\005\116" +
    "\014\235\022\114\023\104\024\112\027\103\030\110\031" +
    "\124\032\102\042\125\043\123\044\115\047\107\050\117" +
    "\051\113\110\121\111\106\001\002\000\004\102\236\001" +
    "\002\000\004\026\237\001\002\000\004\064\240\001\002" +
    "\000\006\062\242\076\uffc3\001\002\000\004\076\247\001" +
    "\002\000\004\007\243\001\002\000\004\026\244\001\002" +
    "\000\004\064\202\001\002\000\006\062\242\076\uffc3\001" +
    "\002\000\004\076\uffc4\001\002\000\004\026\250\001\002" +
    "\000\004\064\202\001\002\000\004\054\252\001\002\000" +
    "\102\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\025\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\045\uffc5\046\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\061\uffc5\063\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\072\uffc5\073\uffc5\074\uffc5\075" +
    "\uffc5\077\uffc5\100\uffc5\103\uffc5\106\uffc5\107\uffc5\110\uffc5" +
    "\001\002\000\102\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\025\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\045\uffd2" +
    "\046\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\061" +
    "\uffd2\063\uffd2\065\uffd2\066\uffd2\067\uffd2\072\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\077\uffd2\100\uffd2\103\uffd2\106\uffd2\107" +
    "\uffd2\110\uffd2\001\002\000\102\006\uffd3\007\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\025\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\045\uffd3\046\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\061\uffd3\063\uffd3\065\uffd3\066\uffd3\067\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\077\uffd3\100\uffd3\103\uffd3" +
    "\106\uffd3\107\uffd3\110\uffd3\001\002\000\046\004\120\005" +
    "\116\017\256\022\114\023\104\024\112\027\103\030\110" +
    "\031\124\032\102\042\125\043\123\044\115\047\107\050" +
    "\117\051\113\110\121\111\106\001\002\000\102\006\uffd4" +
    "\007\uffd4\011\uffd4\012\uffd4\013\uffd4\025\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\045\uffd4\046\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\061\uffd4\063\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\077\uffd4" +
    "\100\uffd4\103\uffd4\106\uffd4\107\uffd4\110\uffd4\001\002\000" +
    "\004\054\uffd9\001\002\000\122\002\uffdb\006\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\025\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\045\uffdb\046\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb" +
    "\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\103" +
    "\uffdb\104\uffdb\106\uffdb\107\uffdb\110\uffdb\001\002\000\034" +
    "\006\053\007\064\012\065\013\056\025\051\035\054\036" +
    "\067\037\057\040\055\045\052\046\060\073\047\110\062" +
    "\001\002\000\046\004\120\005\116\014\263\022\114\023" +
    "\104\024\112\027\103\030\110\031\124\032\102\042\125" +
    "\043\123\044\115\047\107\050\117\051\113\110\121\111" +
    "\106\001\002\000\004\064\202\001\002\000\104\006\uffc6" +
    "\007\uffc6\011\uffc6\012\uffc6\013\uffc6\025\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\045\uffc6\046\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\265\061\uffc6\063\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6" +
    "\077\uffc6\100\uffc6\103\uffc6\106\uffc6\107\uffc6\110\uffc6\001" +
    "\002\000\004\064\202\001\002\000\102\006\uffc7\007\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\025\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\045\uffc7\046\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\061\uffc7\063\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\077\uffc7\100\uffc7" +
    "\103\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000\006\006" +
    "\135\017\270\001\002\000\034\006\053\007\064\012\065" +
    "\013\056\025\051\035\054\036\067\037\057\040\055\045" +
    "\052\046\060\073\047\110\062\001\002\000\016\010\077" +
    "\021\071\033\070\034\073\041\074\052\072\001\002\000" +
    "\004\017\273\001\002\000\034\006\053\007\064\012\065" +
    "\013\056\025\051\035\054\036\067\037\057\040\055\045" +
    "\052\046\060\073\047\110\062\001\002\000\046\004\120" +
    "\005\116\017\275\022\114\023\104\024\112\027\103\030" +
    "\110\031\124\032\102\042\125\043\123\044\115\047\107" +
    "\050\117\051\113\110\121\111\106\001\002\000\036\006" +
    "\053\007\064\012\065\013\056\014\277\025\051\035\054" +
    "\036\067\037\057\040\055\045\052\046\060\073\047\110" +
    "\062\001\002\000\046\004\120\005\116\014\304\022\114" +
    "\023\104\024\112\027\103\030\110\031\124\032\102\042" +
    "\125\043\123\044\115\047\107\050\117\051\113\110\121" +
    "\111\106\001\002\000\004\064\202\001\002\000\046\004" +
    "\uffb4\005\uffb4\014\301\022\uffb4\023\uffb4\024\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\042\uffb4\043\uffb4\044\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\110\uffb4\111\uffb4\001\002\000\004" +
    "\064\202\001\002\000\102\006\uffc2\007\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\025\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\045\uffc2\046\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\061\uffc2\063\uffc2\065\uffc2\066\uffc2\067\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\077\uffc2\100\uffc2\103\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\001\002\000\102\006\uffc0\007\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\025\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\045\uffc0\046\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\061\uffc0\063\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\077\uffc0\100\uffc0" +
    "\103\uffc0\106\uffc0\107\uffc0\110\uffc0\001\002\000\004\064" +
    "\202\001\002\000\102\006\uffc1\007\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\025\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\045" +
    "\uffc1\046\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\061\uffc1\063\uffc1\065\uffc1\066\uffc1\067\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1\103\uffc1\106\uffc1" +
    "\107\uffc1\110\uffc1\001\002\000\046\004\120\005\116\017" +
    "\307\022\114\023\104\024\112\027\103\030\110\031\124" +
    "\032\102\042\125\043\123\044\115\047\107\050\117\051" +
    "\113\110\121\111\106\001\002\000\036\006\053\007\064" +
    "\012\065\013\056\014\311\025\051\035\054\036\067\037" +
    "\057\040\055\045\052\046\060\073\047\110\062\001\002" +
    "\000\046\004\120\005\116\014\316\022\114\023\104\024" +
    "\112\027\103\030\110\031\124\032\102\042\125\043\123" +
    "\044\115\047\107\050\117\051\113\110\121\111\106\001" +
    "\002\000\004\064\202\001\002\000\046\004\uffb4\005\uffb4" +
    "\014\313\022\uffb4\023\uffb4\024\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\042\uffb4\043\uffb4\044\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\110\uffb4\111\uffb4\001\002\000\004\064\202\001" +
    "\002\000\102\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\025\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\045\uffbf\046" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf" +
    "\063\uffbf\065\uffbf\066\uffbf\067\uffbf\072\uffbf\073\uffbf\074" +
    "\uffbf\075\uffbf\077\uffbf\100\uffbf\103\uffbf\106\uffbf\107\uffbf" +
    "\110\uffbf\001\002\000\102\006\uffbd\007\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\025\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\045\uffbd\046\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\061\uffbd\063\uffbd\065\uffbd\066\uffbd\067\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\077\uffbd\100\uffbd\103\uffbd\106" +
    "\uffbd\107\uffbd\110\uffbd\001\002\000\004\064\202\001\002" +
    "\000\102\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\025" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\045\uffbe\046\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\061\uffbe\063" +
    "\uffbe\065\uffbe\066\uffbe\067\uffbe\072\uffbe\073\uffbe\074\uffbe" +
    "\075\uffbe\077\uffbe\100\uffbe\103\uffbe\106\uffbe\107\uffbe\110" +
    "\uffbe\001\002\000\004\104\321\001\002\000\004\013\322" +
    "\001\002\000\034\006\053\007\064\012\065\013\056\025" +
    "\051\035\054\036\067\037\057\040\055\045\052\046\060" +
    "\073\047\110\062\001\002\000\046\004\120\005\116\014" +
    "\324\022\114\023\104\024\112\027\103\030\110\031\124" +
    "\032\102\042\125\043\123\044\115\047\107\050\117\051" +
    "\113\110\121\111\106\001\002\000\004\017\325\001\002" +
    "\000\102\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\025" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\045\uffbc\046\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\061\uffbc\063" +
    "\uffbc\065\uffbc\066\uffbc\067\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\075\uffbc\077\uffbc\100\uffbc\103\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\001\002\000\102\006\uffd1\007\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\025\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\045" +
    "\uffd1\046\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\061\uffd1\063\uffd1\065\uffd1\066\uffd1\067\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\077\uffd1\100\uffd1\103\uffd1\106\uffd1" +
    "\107\uffd1\110\uffd1\001\002\000\004\054\uffda\001\002\000" +
    "\040\002\ufff8\006\ufff8\011\ufff8\055\ufff8\057\ufff8\061\ufff8" +
    "\063\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\075\ufff8\101" +
    "\ufff8\106\ufff8\107\ufff8\001\002\000\010\014\ufff1\015\332" +
    "\020\ufff1\001\002\000\004\016\336\001\002\000\006\014" +
    "\ufff3\020\334\001\002\000\026\006\013\011\017\055\007" +
    "\057\025\061\005\063\011\067\020\075\030\106\027\107" +
    "\021\001\002\000\004\014\ufff4\001\002\000\010\014\ufff1" +
    "\015\332\020\ufff1\001\002\000\006\014\ufff2\020\ufff2\001" +
    "\002\000\006\017\341\064\202\001\002\000\040\002\ufff6" +
    "\006\ufff6\011\ufff6\055\ufff6\057\ufff6\061\ufff6\063\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\075\ufff6\101\ufff6\106\ufff6" +
    "\107\ufff6\001\002\000\040\002\ufff6\006\ufff6\011\ufff6\055" +
    "\ufff6\057\ufff6\061\ufff6\063\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\071\ufff6\075\ufff6\101\ufff6\106\ufff6\107\ufff6\001\002\000" +
    "\040\002\ufff9\006\ufff9\011\ufff9\055\ufff9\057\ufff9\061\ufff9" +
    "\063\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\075\ufff9\101" +
    "\ufff9\106\ufff9\107\ufff9\001\002\000\040\002\ufffa\006\ufffa" +
    "\011\ufffa\055\ufffa\057\ufffa\061\ufffa\063\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\075\ufffa\101\ufffa\106\ufffa\107\ufffa" +
    "\001\002\000\006\017\uffe0\020\036\001\002\000\004\017" +
    "\347\001\002\000\112\002\uffe2\006\uffe2\007\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\025\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\045\uffe2\046\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\061\uffe2\063\uffe2\065\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\077\uffe2" +
    "\100\uffe2\101\uffe2\103\uffe2\106\uffe2\107\uffe2\110\uffe2\001" +
    "\002\000\004\002\ufffe\001\002\000\004\006\352\001\002" +
    "\000\004\017\353\001\002\000\040\002\ufff5\006\ufff5\011" +
    "\ufff5\055\ufff5\057\ufff5\061\ufff5\063\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\075\ufff5\101\ufff5\106\ufff5\107\ufff5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\020\002\015\003\025\004\023\005\005\006" +
    "\014\007\007\010\011\001\001\000\004\010\350\001\001" +
    "\000\002\001\001\000\020\002\347\003\025\004\023\005" +
    "\005\006\014\007\007\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\344\001" +
    "\001\000\002\001\001\000\004\041\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\032" +
    "\001\001\000\020\002\031\003\025\004\023\005\005\006" +
    "\014\007\007\010\011\001\001\000\002\001\001\000\020" +
    "\002\030\003\025\004\023\005\005\006\014\007\007\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\034\001\001\000" +
    "\004\035\043\001\001\000\004\032\036\001\001\000\004" +
    "\013\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\041\001\001\000\002\001\001\000\014\014\062" +
    "\015\156\017\060\020\045\025\065\001\001\000\002\001" +
    "\001\000\014\014\062\015\047\017\060\020\045\025\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\104\026\110\027\121\001\001\000\014\014\062\015\150" +
    "\017\060\020\045\025\065\001\001\000\002\001\001\000" +
    "\004\035\135\001\001\000\002\001\001\000\004\014\140" +
    "\001\001\000\014\014\062\015\136\017\060\020\045\025" +
    "\065\001\001\000\002\001\001\000\004\014\133\001\001" +
    "\000\002\001\001\000\014\014\062\015\132\017\060\020" +
    "\045\025\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\062\015\131\017\060\020\045\025\065\001\001" +
    "\000\014\014\062\015\130\017\060\020\045\025\065\001" +
    "\001\000\014\014\062\015\127\017\060\020\045\025\065" +
    "\001\001\000\014\014\062\015\126\017\060\020\045\025" +
    "\065\001\001\000\014\014\062\015\100\017\060\020\045" +
    "\025\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\104\026\110" +
    "\027\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\062\015\125\017\060\020\045" +
    "\025\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\104\026\110\027\121\001\001" +
    "\000\010\024\104\026\110\027\121\001\001\000\010\024" +
    "\104\026\110\027\121\001\001\000\010\024\104\026\110" +
    "\027\121\001\001\000\010\024\104\026\110\027\121\001" +
    "\001\000\010\024\104\026\110\027\121\001\001\000\002" +
    "\001\001\000\004\035\135\001\001\000\002\001\001\000" +
    "\010\024\104\026\110\027\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\062\015\142\017\060\020" +
    "\045\023\144\025\065\001\001\000\010\024\104\026\110" +
    "\027\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\062\015\142\017\060\020\045" +
    "\023\147\025\065\001\001\000\002\001\001\000\010\024" +
    "\104\026\110\027\121\001\001\000\004\035\152\001\001" +
    "\000\002\001\001\000\004\010\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\104\026\110\027\121" +
    "\001\001\000\002\001\001\000\006\003\161\010\011\001" +
    "\001\000\010\003\163\010\011\031\162\001\001\000\002" +
    "\001\001\000\010\003\163\010\011\031\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\176\011\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\202\001\001\000\004\041\327\001\001\000\030\003\204" +
    "\010\011\014\062\015\221\016\212\017\060\020\045\021" +
    "\217\022\220\025\065\033\211\001\001\000\004\041\203" +
    "\001\001\000\002\001\001\000\030\003\204\010\011\014" +
    "\062\015\221\016\212\017\060\020\045\021\217\022\220" +
    "\025\065\033\326\001\001\000\002\001\001\000\004\012" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\204\010\011\014\062\015\221\016" +
    "\212\017\060\020\045\021\217\022\220\025\065\033\256" +
    "\001\001\000\014\014\062\015\254\017\060\020\045\025" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\104\026\110\027\121\001\001\000\004\035\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\231\001\001" +
    "\000\002\001\001\000\014\014\062\015\233\017\060\020" +
    "\045\025\065\001\001\000\010\024\104\026\110\027\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\244\001\001\000" +
    "\004\034\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\104" +
    "\026\110\027\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\062\015\261\017\060" +
    "\020\045\025\065\001\001\000\010\024\104\026\110\027" +
    "\121\001\001\000\004\012\263\001\001\000\002\001\001" +
    "\000\004\012\265\001\001\000\002\001\001\000\006\014" +
    "\270\017\271\001\001\000\014\014\062\015\305\017\060" +
    "\020\045\025\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\062\015\273\017\060\020\045\025\065" +
    "\001\001\000\010\024\104\026\110\027\121\001\001\000" +
    "\014\014\062\015\275\017\277\020\045\025\065\001\001" +
    "\000\010\024\104\026\110\027\121\001\001\000\004\012" +
    "\302\001\001\000\002\001\001\000\004\012\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\304\001" +
    "\001\000\002\001\001\000\010\024\104\026\110\027\121" +
    "\001\001\000\014\014\062\015\307\017\311\020\045\025" +
    "\065\001\001\000\010\024\104\026\110\027\121\001\001" +
    "\000\004\012\314\001\001\000\002\001\001\000\004\012" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\062\015\322\017\060\020\045" +
    "\025\065\001\001\000\010\024\104\026\110\027\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\176" +
    "\011\334\001\001\000\002\001\001\000\004\030\336\001" +
    "\001\000\002\001\001\000\004\012\341\001\001\000\004" +
    "\041\343\001\001\000\004\041\342\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	System.out.println("Start...");
	//table = new Hashtable<String,sym>();

    }


//public static Hashtable<String,String> table;
boolean DEBUGS = true;

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");


        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= var_dcl program 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("program found(var dcl)"); }  RESULT = ((Program)e1).add((Node)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= func_extern program 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("program found(func extern)"); } RESULT = ((Program)e1).add((Node)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= struct_dec program 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("program found(struct dec)"); } RESULT = ((Program)e1).add((Node)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("program found(epsilon)"); } RESULT = new Program(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_extern ::= func_dcl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("func extern found(func dcl)"); } RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_extern ::= extern_dcl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("func extern found(extern dcl)"); }  RESULT=e;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_dcl ::= FUNCTION globalIndicate type IDENTIFIER LPAREN arguments RPAREN SEMICOLON globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FuncDcleration(HelperFunctions.reverse((ArrayList <Argument >)e3), (String)e1, (String)e2, null) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_dcl ::= FUNCTION globalIndicate type IDENTIFIER LPAREN arguments RPAREN block globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FuncDcleration(HelperFunctions.reverse((ArrayList <Argument >)e3), (String)e1, (String)e2, (Block)e4) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_dcl ::= FUNCTION globalIndicate type IDENTIFIER LPAREN RPAREN SEMICOLON globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FuncDcleration( new ArrayList <Argument>(), (String)e1, (String)e2, null) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_dcl ::= FUNCTION globalIndicate type IDENTIFIER LPAREN RPAREN block globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FuncDcleration( new ArrayList <Argument>(), (String)e1, (String)e2, (Block)e4) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // globalIndicate ::= 
            {
              Object RESULT =null;
		if( DEBUGS ){ System.out.println("func dcl found"); } DefinedValues.changeScope();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalIndicate",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extern_dcl ::= EXTERN type IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("extern dcl found"); } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern_dcl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arguments ::= type IDENTIFIER exp1 COMMA arguments 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("arguments found(comma)"); } ArrayList <Argument> a = (ArrayList <Argument>)e4   ; a.add(new Argument((String)e1, (String)e2,(Integer)e3)); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arguments ::= type IDENTIFIER exp1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("arguments found(no comma)"); } ArrayList <Argument> a = new ArrayList <Argument>() ; a.add(new Argument((String)e1, (String)e2,(Integer)e3)); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp1 ::= LBRACK RBRACK exp1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp1 found(bracket)"); } RESULT = (Integer)e + 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp1 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp1 found(epsilon)"); }  RESULT = new Integer(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type int found"); }  RESULT = e ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type bool found"); }  RESULT = e ;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type float found"); }  RESULT = e ;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= LONG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type long found"); }  RESULT = e ;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type char found"); }   RESULT = e ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= DOUBLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type double found"); }  RESULT = e ;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type identifier found"); }  RESULT = e ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type string found"); }  RESULT = e ;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type void found"); }  RESULT = e ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= AUTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type auto found"); }   RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_dec ::= RECORD IDENTIFIER BEGIN var_dcl exp2 END RECORD SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if( DEBUGS ){ System.out.println("struct dec found"); }ArrayList <Var_decleration> a = (ArrayList <Var_decleration>) e3 ;a.add((Var_decleration)e2);a = HelperFunctions.reverse(a) ;RESULT = new StructDecleration(a,(String)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp2 ::= var_dcl exp2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp2 found(var dcl)"); }  ArrayList <Var_decleration> a = (ArrayList <Var_decleration>) e2 ; a.add((Var_decleration)e1); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp2 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp2 found(epsilon)"); }   ArrayList <Var_decleration> a = new ArrayList<Var_decleration>(); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_dcl ::= CONST type var_dcl_cnt exp3 SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("var_dcl found(const)"); } ArrayList <Var_Decleration_Cnt> a = (ArrayList <Var_Decleration_Cnt>) e3; a.add((Var_Decleration_Cnt)e2); HelperFunctions.reverse(a); RESULT = new Var_decleration((String)e1,true ,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_dcl ::= type var_dcl_cnt exp3 SEMICOLON 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("var_dcl found(no const)"); }
              ArrayList <Var_Decleration_Cnt> a;
              if(e6 == null)
              {
                a = new ArrayList<>();
              }
              else
                a = (ArrayList<Var_Decleration_Cnt>) e6;
              a.add((Var_Decleration_Cnt)e5);  HelperFunctions.reverse(a); RESULT = new Var_decleration((String)e4,false ,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp3 ::= COMMA var_dcl_cnt exp3 
            {
              Object RESULT =null;
		int e7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp3 found"); } ArrayList <Var_Decleration_Cnt> a = (ArrayList <Var_Decleration_Cnt>) e8; a.add((Var_Decleration_Cnt)e7); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp3 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp3 found(epsilon)"); } ArrayList <Var_Decleration_Cnt> a = new ArrayList<Var_Decleration_Cnt>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_dcl_cnt ::= IDENTIFIER EQ expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("var dcl cnt found"); }RESULT = new Var_Decleration_Cnt((String)v, (Exp)e ,null); ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_dcl_cnt ::= IDENTIFIER exp6 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("var dcl cnt found"); }RESULT = new Var_Decleration_Cnt((String)e1,null, HelperFunctions.reverse((ArrayList <Exp>)e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp6 ::= LBRACK expr RBRACK exp6 
            {
              Object RESULT =null;
		int e7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp6 found(brack)"); } ArrayList <Exp> a=(ArrayList <Exp>)e8;a.add((Exp)e7); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp6 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp6 found(epsilon)"); } RESULT = new ArrayList <Exp>() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block ::= BEGIN exp4 END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("block found"); } RESULT = new Block(HelperFunctions.reverse((ArrayList <TempNode>)e)) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp4 ::= var_dcl exp4 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp4 found var"); }   ArrayList <TempNode> a = (ArrayList <TempNode>) e2 ; a.add((TempNode)e1); RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp4 ::= statement exp4 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp4 found state"); } ArrayList <TempNode> a = (ArrayList <TempNode>) e2 ; a.add((TempNode)e1); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp4 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp4 found empty"); }  RESULT = new ArrayList <TempNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = new ExpStatment((Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= cond_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("statement found(cond)"); } RESULT = e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= loop_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("statement found(loop)"); }  RESULT = e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("statement ret found(return expr)"); }RESULT = new Return((Exp)e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("statement ret found(return)"); } RESULT = new Return() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("statement found(break)"); } RESULT = new Break()  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("statement found(continue)"); }RESULT = new Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= variable EQ expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found(eq)"); } RESULT = new Assignment((Exp)e,(Variables)v);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= variable PLUSEQ expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found(pluseq)"); } RESULT = new PlusAssignment((Variables)v,(Exp)e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= variable MINUSEQ expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found(minuseq)"); } RESULT = new MinusAssignment((Variables)v,(Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment ::= variable DIVEQ expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found(diveq)"); } RESULT = new DivideAssignment((Variables)v,(Exp)e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment ::= variable MULTEQ expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found(multeq)"); } RESULT = new MultAssignment((Variables)v,(Exp)e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_call ::= IDENTIFIER LPAREN parameters RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("method found(parameter)"); }  RESULT = new MethodCall((String)e, HelperFunctions.reverse((ArrayList<Exp>)e1));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_call ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if( DEBUGS ){ System.out.println("method found(no parameter)");  }  RESULT = new MethodCall((String)e,new ArrayList<Exp>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameters ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("parameters found(no comma)"); } ArrayList <Exp> a = new ArrayList<Exp>();	 a.add((Exp)e); RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameters ::= expr COMMA parameters 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("parameters found(comma parameter)"); }  ((ArrayList <Exp>)e1).add((Exp)e); RESULT = e1;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond_stmt ::= IF LPAREN expr RPAREN block ELSE block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("cond_stmt found(else)"); } RESULT = new If((Exp)e1,(Block)e2,(Block)e3) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond_stmt ::= IF LPAREN expr RPAREN block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("cond_stmt found(if)"); } RESULT = new If((Exp)e1,(Block)e2,null) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond_stmt ::= SWITCH LPAREN expr RPAREN OF COLON BEGIN exp5 DEFAULT COLON block END 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("cond_stmt found(switch)"); } RESULT = new SwitchPart((Exp)e1, HelperFunctions.reverse((ArrayList <CasePart>)e2), (Block) e3) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp5 ::= CASE INTEGER_LITERAL COLON block exp5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp5 found(case)"); } ArrayList <CasePart> a = (ArrayList <CasePart>)e3; a.add(new CasePart((Block)e2 ,new IntConstantExp(HelperFunctions.parseInt((String)e1)))); RESULT = a ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp5 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp5 found(epsilon)"); } RESULT = new ArrayList <CasePart>() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // loop_stmt ::= FOR LPAREN assignment SEMICOLON expr SEMICOLON assignment RPAREN block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForLoop((Block)e4,(Assignment)e1,(Exp)e2,(Exp)e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // loop_stmt ::= FOR LPAREN assignment SEMICOLON expr SEMICOLON expr RPAREN block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForLoop((Block)e4,(Assignment)e1,(Exp)e2,(Exp)e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // loop_stmt ::= FOR LPAREN assignment SEMICOLON expr SEMICOLON RPAREN block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForLoop((Block)e4,(Assignment)e1,(Exp)e2, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loop_stmt ::= FOR LPAREN SEMICOLON expr SEMICOLON assignment RPAREN block 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForLoop((Block)e4,null,(Exp)e2,(Exp)e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loop_stmt ::= FOR LPAREN SEMICOLON expr SEMICOLON expr RPAREN block 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForLoop((Block)e4,null,(Exp)e2,(Exp)e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // loop_stmt ::= FOR LPAREN SEMICOLON expr SEMICOLON RPAREN block 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForLoop((Block)e4,null,(Exp)e2,null);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // loop_stmt ::= REPEAT block UNTIL LPAREN expr RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found(repeat)"); } RESULT = new RepeatLoop((Block)e1,(Exp)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // loop_stmt ::= FOREACH LPAREN IDENTIFIER IN IDENTIFIER RPAREN block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found(foreach)"); } RESULT = new ForEachLoop((Block)e3, (String)e1, (String)e2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr binary_op expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found(binary op)"); } RESULT = ((Binaryop)e2).setBinaryExp((Exp)e1,(Exp)e3);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("expr found(expr)"); }  Parantheses a = new Parantheses(); a.setUnryExp((Exp)e); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= method_call 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found(method call)"); }  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= variable 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found(vvariable)"); }  RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= const_val 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found(const val)"); } RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= MINUS expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found(minus)"); } UnryExp a = new AST.exp.UnryVariableExp.Minus();a.setUnryExp((Exp)e) ;RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= assignment 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if( DEBUGS ){ System.out.println("expr found"); }RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= COMP expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found(comp)"); } UnryExp a = new AST.exp.UnryVariableExp.Not();a.setUnryExp((Exp)e) ;RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= MINUSMINUS variable 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("variable found(minus minus)"); } MinusMinuspre a=new MinusMinuspre(); a.setUnryExp((Exp)e); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= PLUSPLUS variable 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("variable found(plus plus)"); } PlusPluspre a=new PlusPluspre(); a.setUnryExp((Exp)e); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= variable MINUSMINUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("variable found(minus minus)"); } MinusMinuspos a=new MinusMinuspos(); a.setUnryExp((Exp)e); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= variable PLUSPLUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("variable found(plus plus)"); }PlusPluspos a=new PlusPluspos(); a.setUnryExp((Exp)e); RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= SIZEOF LPAREN type RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("statement found(sizeof)"); } RESULT = new Sizeof((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variable ::= IDENTIFIER exp6 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("variable found(identifier)"); }  if(((ArrayList <Exp>)e2).size()==0){RESULT = new SimpleVariable((String)e1);}else{RESULT = new ArrayVariable((String)e1,HelperFunctions.reverse((ArrayList <Exp>)e2));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable ::= variable DOT IDENTIFIER 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if( DEBUGS ){ System.out.println("variable found(dot id)"); } RESULT = new VariableDot((Variables)e2, (String)e3);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binary_op ::= arithmatic 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("binary op found(arithmatic)");} RESULT = (Binaryop)e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binary_op ::= conditional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("binary op found(condition)");} RESULT = (Binaryop)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arithmatic ::= PLUS 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found plus"); } RESULT =new AST.exp.Binary_op.arithmatic.Add();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arithmatic ::= MINUS 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found minus"); } RESULT =new AST.exp.Binary_op.arithmatic.Minus();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arithmatic ::= MULT 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found mult"); } RESULT =new AST.exp.Binary_op.arithmatic.Mult(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arithmatic ::= DIV 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found div"); } RESULT =new AST.exp.Binary_op.arithmatic.Divide(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arithmatic ::= MOD 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found mod"); } RESULT =new AST.exp.Binary_op.arithmatic.Mod(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arithmatic ::= AND 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found and"); } RESULT =new AST.exp.Binary_op.arithmatic.And(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arithmatic ::= OR 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found or"); } RESULT =new AST.exp.Binary_op.arithmatic.Or(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arithmatic ::= XOR 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found xor"); } RESULT =new AST.exp.Binary_op.arithmatic.Xor(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conditional ::= EQEQ 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found eq eq"); } RESULT =new EqEq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // conditional ::= NOTEQ 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found noteq"); } RESULT =new NotEq();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // conditional ::= GTEQ 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found gteq"); } RESULT =new GreaterEq();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // conditional ::= LTEQ 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found lteq"); } RESULT =new SmallerEq();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // conditional ::= LT 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found lt"); } RESULT =new Smaller();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conditional ::= GT 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found gt"); }  RESULT =new SmallerEq();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conditional ::= ANDAND 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found andand"); } RESULT =new and();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conditional ::= OROR 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found oror"); } RESULT =new or();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conditional ::= NOT 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found not"); } RESULT =new Not();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // const_val ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by INT_CONST"); } RESULT=new IntConstantExp(Integer.parseInt((String)e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // const_val ::= REAL_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by REAL_CONST"); }  RESULT=new RealConstantExp(Double.parseDouble((String)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // const_val ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by CHAR_CONST"); } RESULT=new CharConstantExp(((String)e).charAt(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // const_val ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by BOOL_CONST"); } RESULT=new BooleanConstantExp(((String)e).equals("true") ? true : false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // const_val ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by STRING_CONST"); }  RESULT=new StringConstantExp((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // const_val ::= LONG_LITERAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by LONG_CONST"); } RESULT=new LongConstantExp(new Long(((String)e).substring(0,((String)e).length()-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
