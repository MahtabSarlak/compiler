/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/ASUS/Documents/term4/compiler/compiler_part2/src/lexer</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\106\1\107\1\1\16\10\4\0\1\3\1\73"+
    "\1\25\1\5\1\7\1\100\1\75\1\26\1\60\1\61\1\6\1\74"+
    "\1\65\1\24\1\22\1\4\1\11\1\17\1\101\1\16\1\102\1\20"+
    "\1\105\1\103\1\104\1\12\1\72\1\64\1\70\1\66\1\67\2\0"+
    "\3\15\1\21\1\23\1\21\2\7\1\55\2\7\1\13\1\7\1\56"+
    "\11\7\1\14\2\7\1\62\1\27\1\63\1\77\1\7\1\0\1\40"+
    "\1\30\1\42\1\47\1\31\1\50\1\32\1\44\1\33\1\7\1\41"+
    "\1\36\1\7\1\34\1\35\1\52\1\7\1\37\1\43\1\45\1\46"+
    "\1\54\1\57\1\51\1\7\1\53\1\0\1\76\1\0\1\71\6\10"+
    "\1\110\32\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7"+
    "\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7"+
    "\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0"+
    "\2\7\2\0\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0"+
    "\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0"+
    "\46\7\2\0\1\7\7\0\47\7\7\0\1\7\1\0\55\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\7\5\0"+
    "\3\7\15\0\5\10\6\0\1\7\4\0\13\10\5\0\53\7\37\10"+
    "\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0\6\10\2\7"+
    "\2\10\1\0\4\10\2\7\12\10\3\7\2\0\1\7\17\0\1\10"+
    "\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7\16\0\12\10"+
    "\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10\1\7\11\10"+
    "\1\7\3\10\1\7\5\10\22\0\31\7\3\10\104\0\1\7\1\0"+
    "\13\7\67\0\33\10\1\0\4\10\66\7\3\10\1\7\22\10\1\7"+
    "\7\10\12\7\2\10\2\0\12\10\1\0\7\7\1\0\7\7\1\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0"+
    "\12\10\4\7\7\0\1\7\5\0\3\10\1\0\6\7\4\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10"+
    "\7\0\4\7\1\0\1\7\7\0\14\10\3\7\1\10\13\0\3\10"+
    "\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10\1\0\3\10"+
    "\2\0\1\7\17\0\2\7\2\10\2\0\12\10\1\0\1\7\17\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10"+
    "\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0"+
    "\1\7\6\0\1\10\16\0\12\10\11\0\1\7\7\0\3\10\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\7"+
    "\6\0\2\7\2\10\2\0\12\10\22\0\2\10\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7"+
    "\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0"+
    "\2\7\2\10\2\0\12\10\1\0\2\7\17\0\2\10\1\0\10\7"+
    "\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0\3\10\1\0"+
    "\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0\12\10\12\0"+
    "\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0\11\7\1\0"+
    "\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0\1\10\1\0"+
    "\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10\4\0\10\7"+
    "\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0\2\7\1\0"+
    "\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10\2\7\6\10"+
    "\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0"+
    "\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0\12\10\13\0"+
    "\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7"+
    "\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10"+
    "\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10\4\7\3\10"+
    "\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7\17\10"+
    "\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7"+
    "\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7"+
    "\2\0\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7"+
    "\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7"+
    "\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0"+
    "\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7"+
    "\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0"+
    "\51\7\1\10\1\7\5\0\106\7\12\0\35\7\3\0\14\10\4\0"+
    "\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7\4\0\21\10"+
    "\7\7\2\10\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10"+
    "\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7\130\0\5\10"+
    "\57\7\21\10\7\7\4\0\12\10\21\0\11\10\14\0\3\10\36\7"+
    "\15\10\2\7\12\10\54\7\16\10\14\0\44\7\24\10\10\0\12\10"+
    "\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10\4\7\1\10"+
    "\4\7\3\10\2\7\11\0\300\7\47\10\25\0\4\10\u0116\7\2\0"+
    "\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\16\0\5\10\30\0\1\106\1\106"+
    "\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0\6\10\1\0"+
    "\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0\15\10\4\0"+
    "\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0\12\7\1\0"+
    "\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\21\0"+
    "\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0\4\7\3\10"+
    "\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0\70\7\7\0"+
    "\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0"+
    "\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7\1\0"+
    "\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7\65\0"+
    "\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0\56\7\2\0"+
    "\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10\4\0\12\10"+
    "\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7\2\0\147\7"+
    "\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7\1\10\3\7"+
    "\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0"+
    "\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7\3\0\1\7"+
    "\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0\35\7\3\0"+
    "\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7\16\10\11\0"+
    "\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7\3\0\1\7"+
    "\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10\5\7\2\10"+
    "\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10\2\0\3\7"+
    "\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\1\0"+
    "\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\7"+
    "\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7\46\0\7\7"+
    "\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7\1\0\5\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7"+
    "\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10\20\0\7\10"+
    "\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7"+
    "\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7\4\0\1\7"+
    "\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7"+
    "\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10\4\0\14\7"+
    "\1\0\32\7\1\0\23\7\1\0\2\7\1\0\17\7\2\0\16\7"+
    "\42\0\173\7\105\0\65\7\210\0\1\10\202\0\35\7\3\0\61\7"+
    "\57\0\37\7\21\0\33\7\65\0\36\7\2\0\44\7\4\0\10\7"+
    "\1\0\5\7\52\0\236\7\2\0\12\10\u0356\0\6\7\2\0\1\7"+
    "\1\0\54\7\1\0\2\7\3\0\1\7\2\0\27\7\252\0\26\7"+
    "\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7\3\10\1\0"+
    "\2\10\5\0\4\10\4\7\1\0\3\7\1\0\33\7\4\0\3\10"+
    "\4\0\1\10\40\0\35\7\203\0\66\7\12\0\26\7\12\0\23\7"+
    "\215\0\111\7\u03b7\0\3\10\65\7\17\10\37\0\12\10\20\0\3\10"+
    "\55\7\13\10\2\0\1\10\22\0\31\7\7\0\12\10\6\0\3\10"+
    "\44\7\16\10\1\0\12\10\100\0\3\10\60\7\16\10\4\7\13\0"+
    "\12\10\u04a6\0\53\7\15\10\10\0\12\10\u0936\0\u036f\7\221\0\143\7"+
    "\u0b9d\0\u042f\7\u33d1\0\u0239\7\u04c7\0\105\7\13\0\1\7\56\10\20\0"+
    "\4\10\15\7\u4060\0\2\7\u2163\0\5\10\3\0\26\10\2\0\7\10"+
    "\36\0\4\10\224\0\3\10\u01bb\0\125\7\1\0\107\7\1\0\2\7"+
    "\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7"+
    "\1\0\7\7\1\0\101\7\1\0\4\7\2\0\10\7\1\0\7\7"+
    "\1\0\34\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\7\7"+
    "\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0\37\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\10\7\2\0\62\10\u1600\0\4\7\1\0\33\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7"+
    "\1\0\1\7\1\0\12\7\1\0\21\7\5\0\3\7\1\0\5\7"+
    "\1\0\21\7\u1144\0\ua6d7\7\51\0\u1035\7\13\0\336\7\u3fe2\0\u021e\7"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\2\7\1\10\1\11\1\12\1\13\20\6\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\35\1\36\2\1\2\37\1\1\1\0\1\40\1\41"+
    "\1\42\1\7\1\43\1\44\1\0\3\7\2\43\1\0"+
    "\1\45\1\46\1\0\7\6\1\47\1\6\1\50\1\51"+
    "\23\6\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\2\0\2\41\4\7\1\43\2\0"+
    "\3\6\1\64\2\6\1\65\1\66\4\6\1\67\13\6"+
    "\1\70\4\6\1\0\3\7\1\0\1\6\1\71\1\6"+
    "\1\72\1\6\1\73\3\6\1\74\2\6\1\75\1\76"+
    "\3\6\1\77\6\6\1\100\3\7\1\0\1\101\1\102"+
    "\4\6\1\103\4\6\1\104\3\6\1\105\1\6\3\7"+
    "\1\0\1\106\1\107\1\110\1\111\1\6\1\112\1\113"+
    "\1\114\1\6\1\115\2\6\3\7\1\0\1\6\1\116"+
    "\1\117\1\6\3\7\1\0\1\120\1\121\3\7\1\0"+
    "\3\7\2\0\3\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\1\0\2\7\1\0\1\7\1\43"+
    "\1\0\5\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\333\0\333\0\u016d"+
    "\0\u01b6\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\333"+
    "\0\333\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b"+
    "\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3"+
    "\0\u07fc\0\333\0\333\0\333\0\333\0\333\0\333\0\u0845"+
    "\0\u088e\0\u08d7\0\333\0\333\0\u0920\0\u0969\0\333\0\333"+
    "\0\333\0\333\0\u09b2\0\u09fb\0\333\0\333\0\u0a44\0\u0a8d"+
    "\0\u0ad6\0\333\0\u0b1f\0\u0b68\0\333\0\u0bb1\0\333\0\u0bfa"+
    "\0\u0c43\0\333\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\333\0\u0db0"+
    "\0\u0df9\0\333\0\333\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66"+
    "\0\u0faf\0\u0ff8\0\u1041\0\u0248\0\u108a\0\u0248\0\u0248\0\u10d3"+
    "\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563"+
    "\0\u15ac\0\u15f5\0\u0248\0\333\0\333\0\333\0\333\0\333"+
    "\0\333\0\333\0\333\0\u0a8d\0\u163e\0\u1687\0\u16d0\0\333"+
    "\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918"+
    "\0\u1961\0\u19aa\0\u0248\0\u19f3\0\u1a3c\0\u0248\0\u0248\0\u1a85"+
    "\0\u1ace\0\u1b17\0\u1b60\0\u0248\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc"+
    "\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114"+
    "\0\u215d\0\u21a6\0\u0248\0\u21ef\0\u0248\0\u2238\0\u0248\0\u2281"+
    "\0\u22ca\0\u2313\0\u0248\0\u235c\0\u23a5\0\u0248\0\u0248\0\u23ee"+
    "\0\u2437\0\u2480\0\u0248\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed"+
    "\0\u2636\0\u0248\0\u267f\0\u26c8\0\u2711\0\u275a\0\u0248\0\u0248"+
    "\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u0248\0\u28c7\0\u2910\0\u2959"+
    "\0\u29a2\0\u0248\0\u29eb\0\u2a34\0\u2a7d\0\u0248\0\u2ac6\0\u2b0f"+
    "\0\u2b58\0\u2ba1\0\u2bea\0\u0248\0\u0248\0\u0248\0\u0248\0\u2c33"+
    "\0\u0248\0\u0248\0\u0248\0\u2c7c\0\u0248\0\u2cc5\0\u2d0e\0\u2d57"+
    "\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u0248\0\u0248\0\u2ec4\0\u2f0d"+
    "\0\u2f56\0\u2f9f\0\u2fe8\0\u0248\0\u0248\0\u3031\0\u307a\0\u30c3"+
    "\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b"+
    "\0\333\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a"+
    "\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752"+
    "\0\u379b\0\u37e4\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951"+
    "\0\u399a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\4\1\14\1\15\3\13\3\15\1\13\1\16\1\13"+
    "\1\17\1\20\1\21\1\4\1\22\1\23\1\13\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\13\1\32\1\33"+
    "\1\13\1\34\1\35\1\36\1\37\3\13\1\40\1\41"+
    "\2\13\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\5\15\1\4\1\7\1\4\1\63\1\64"+
    "\1\65\22\63\1\66\1\63\1\67\61\63\1\70\1\71"+
    "\1\72\23\70\1\4\1\73\61\70\113\0\1\6\113\0"+
    "\1\74\60\0\1\75\27\0\1\76\171\0\1\77\31\0"+
    "\13\13\1\0\1\13\4\0\30\13\21\0\5\13\2\0"+
    "\1\13\11\0\1\100\1\101\1\102\1\103\1\0\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\5\0\1\111\4\0"+
    "\1\102\10\0\2\107\1\103\27\0\1\104\2\106\1\101"+
    "\1\106\14\0\2\15\1\102\2\0\3\15\1\107\1\110"+
    "\1\111\5\0\1\111\4\0\1\102\10\0\2\107\30\0"+
    "\5\15\14\0\2\110\3\0\3\110\60\0\5\110\27\0"+
    "\1\112\41\0\1\113\12\0\1\114\16\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\115\3\13\1\116\1\13\1\117"+
    "\20\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\4\13\1\120\1\13\1\121\12\13\1\122"+
    "\6\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\4\13\1\123\13\13\1\124\7\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\5\13\1\125\22\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\7\13\1\126\10\13\1\127"+
    "\7\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\5\13\1\130\22\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\1\13\1\131"+
    "\26\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\4\13\1\132\11\13\1\133\11\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\5\13\1\134\2\13\1\135\3\13\1\136\13\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\3\13\1\137\11\13\1\140\11\13\1\141\21\0\5\13"+
    "\2\0\1\13\7\0\13\13\1\0\1\13\4\0\7\13"+
    "\1\142\20\13\21\0\5\13\2\0\1\13\7\0\13\13"+
    "\1\0\1\13\4\0\4\13\1\143\23\13\21\0\5\13"+
    "\2\0\1\13\7\0\13\13\1\0\1\13\4\0\1\13"+
    "\1\144\3\13\1\145\22\13\21\0\5\13\2\0\1\13"+
    "\7\0\13\13\1\0\1\13\4\0\5\13\1\146\1\147"+
    "\1\13\1\150\5\13\1\151\11\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\5\13\1\152"+
    "\22\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\26\13\1\153\1\13\21\0\5\13\2\0"+
    "\1\13\66\0\1\154\110\0\1\155\110\0\1\156\110\0"+
    "\1\157\110\0\1\160\5\0\1\161\14\0\1\63\2\0"+
    "\22\63\1\0\1\63\1\0\61\63\2\0\1\65\106\0"+
    "\1\162\2\0\103\162\31\0\1\163\64\0\1\72\106\0"+
    "\1\164\2\0\103\164\3\0\5\165\1\166\103\165\1\76"+
    "\1\167\1\170\106\76\11\0\1\100\1\101\1\102\2\0"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\5\0\1\111"+
    "\4\0\1\102\10\0\2\107\30\0\1\104\2\106\1\101"+
    "\1\106\14\0\2\101\3\0\3\101\1\107\1\110\1\111"+
    "\5\0\1\111\15\0\2\107\30\0\5\101\14\0\1\171"+
    "\1\172\2\0\5\172\1\0\1\172\4\0\2\172\6\0"+
    "\1\172\1\0\1\172\4\0\2\172\30\0\5\172\14\0"+
    "\1\173\1\101\1\102\2\0\3\173\1\107\1\110\1\111"+
    "\5\0\1\111\4\0\1\102\10\0\2\107\30\0\3\173"+
    "\1\101\1\173\14\0\1\106\1\101\1\102\2\0\3\106"+
    "\1\107\1\110\1\111\5\0\1\111\4\0\1\102\10\0"+
    "\2\107\30\0\3\106\1\101\1\106\14\0\1\174\1\101"+
    "\1\102\2\0\3\174\1\107\1\110\1\111\5\0\1\111"+
    "\4\0\1\102\10\0\2\107\30\0\3\174\1\101\1\174"+
    "\14\0\2\110\3\0\3\110\1\107\1\0\1\111\5\0"+
    "\1\111\15\0\2\107\30\0\5\110\14\0\2\175\3\0"+
    "\3\175\3\0\1\176\47\0\1\176\4\0\5\175\22\0"+
    "\1\177\100\0\13\13\1\0\1\13\4\0\2\13\1\200"+
    "\25\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\5\13\1\201\22\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\1\13\1\202"+
    "\26\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\17\13\1\203\10\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\13\13\1\204"+
    "\14\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\15\13\1\205\12\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\15\13\1\206"+
    "\12\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\15\13\1\207\12\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\4\13\1\210"+
    "\23\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\12\13\1\211\2\13\1\212\4\13\1\213"+
    "\5\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\17\13\1\214\10\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\15\13\1\215"+
    "\12\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\4\13\1\216\23\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\13\13\1\217"+
    "\14\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\10\13\1\220\17\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\23\13\1\221"+
    "\4\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\7\13\1\222\20\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\3\13\1\223"+
    "\24\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\16\13\1\224\11\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\15\13\1\225"+
    "\12\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\20\13\1\226\7\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\16\13\1\227"+
    "\11\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\7\13\1\230\20\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\5\13\1\231"+
    "\22\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\6\13\1\232\21\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\4\13\1\233"+
    "\23\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\3\13\1\234\24\13\21\0\5\13\2\0"+
    "\1\13\5\165\1\235\103\165\4\0\1\170\1\166\105\0"+
    "\1\170\117\0\1\171\1\172\1\102\1\0\5\172\1\0"+
    "\1\172\4\0\2\172\4\0\1\102\1\0\1\172\1\0"+
    "\1\172\4\0\2\172\30\0\5\172\14\0\2\236\1\102"+
    "\1\0\5\236\1\0\1\236\4\0\2\236\4\0\1\102"+
    "\1\0\1\236\1\0\1\236\4\0\2\236\30\0\5\236"+
    "\14\0\1\237\1\101\1\102\2\0\3\237\1\107\1\110"+
    "\1\111\5\0\1\111\4\0\1\102\10\0\2\107\30\0"+
    "\3\237\1\101\1\237\14\0\1\240\1\101\1\102\2\0"+
    "\3\240\1\107\1\110\1\111\5\0\1\111\4\0\1\102"+
    "\10\0\2\107\30\0\3\240\1\101\1\240\14\0\2\175"+
    "\3\0\3\175\1\107\25\0\2\107\30\0\5\175\14\0"+
    "\2\175\3\0\3\175\60\0\5\175\105\0\1\241\15\0"+
    "\13\13\1\0\1\13\4\0\3\13\1\242\24\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\6\13\1\243\21\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\10\13\1\244\17\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\1\13\1\245\26\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\1\13\1\246\26\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\2\13\1\247\25\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\5\13\1\250\22\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\16\13\1\251\11\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\1\13\1\252\26\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\5\13\1\253\22\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\13\13\1\254\1\13\1\255"+
    "\12\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\256\26\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\7\13\1\257"+
    "\20\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\1\13\1\260\26\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\3\13\1\261"+
    "\24\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\15\13\1\262\12\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\1\13\1\263"+
    "\26\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\3\13\1\264\24\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\10\13\1\265"+
    "\17\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\1\266\27\13\21\0\5\13\2\0\1\13"+
    "\7\0\13\13\1\0\1\13\4\0\1\13\1\267\26\13"+
    "\21\0\5\13\2\0\1\13\7\0\13\13\1\0\1\13"+
    "\4\0\10\13\1\270\17\13\21\0\5\13\2\0\1\13"+
    "\7\0\13\13\1\0\1\13\4\0\13\13\1\224\14\13"+
    "\21\0\5\13\2\0\1\13\7\0\13\13\1\0\1\13"+
    "\4\0\12\13\1\271\15\13\21\0\5\13\2\0\1\13"+
    "\7\0\13\13\1\0\1\13\4\0\17\13\1\272\10\13"+
    "\21\0\5\13\2\0\1\13\4\165\1\170\1\235\103\165"+
    "\11\0\2\273\1\102\1\0\5\273\1\0\1\273\4\0"+
    "\2\273\4\0\1\102\1\0\1\273\1\0\1\273\4\0"+
    "\2\273\30\0\5\273\14\0\1\274\1\101\1\102\2\0"+
    "\3\274\1\107\1\110\1\111\5\0\1\111\4\0\1\102"+
    "\10\0\2\107\30\0\3\274\1\101\1\274\14\0\1\275"+
    "\1\101\1\102\2\0\3\275\1\107\1\110\1\111\5\0"+
    "\1\111\4\0\1\102\10\0\2\107\30\0\3\275\1\101"+
    "\1\275\106\0\1\276\14\0\13\13\1\0\1\13\4\0"+
    "\4\13\1\277\23\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\11\13\1\300\16\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\301\20\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\7\13\1\302\20\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\7\13\1\303\20\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\10\13\1\304\17\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\15\13\1\305\12\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\3\13\1\306\24\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\5\13\1\307\22\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\4\13\1\310\23\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\12\13\1\311\15\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\312\21\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\16\13\1\313\11\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\6\13\1\314\21\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\10\13\1\315\17\13\21\0\5\13\2\0\1\13\7\0"+
    "\13\13\1\0\1\13\4\0\15\13\1\316\12\13\21\0"+
    "\5\13\2\0\1\13\7\0\13\13\1\0\1\13\4\0"+
    "\15\13\1\317\12\13\21\0\5\13\2\0\1\13\11\0"+
    "\2\320\1\102\1\0\5\320\1\0\1\320\4\0\2\320"+
    "\4\0\1\102\1\0\1\320\1\0\1\320\4\0\2\320"+
    "\30\0\5\320\14\0\1\321\1\101\1\102\2\0\3\321"+
    "\1\107\1\110\1\111\5\0\1\111\4\0\1\102\10\0"+
    "\2\107\30\0\3\321\1\101\1\321\14\0\1\322\1\101"+
    "\1\102\2\0\3\322\1\107\1\110\1\111\5\0\1\111"+
    "\4\0\1\102\10\0\2\107\30\0\3\322\1\101\1\322"+
    "\105\0\1\323\15\0\13\13\1\0\1\13\4\0\4\13"+
    "\1\324\23\13\21\0\5\13\2\0\1\13\7\0\13\13"+
    "\1\0\1\13\4\0\17\13\1\325\10\13\21\0\5\13"+
    "\2\0\1\13\7\0\13\13\1\0\1\13\4\0\4\13"+
    "\1\326\23\13\21\0\5\13\2\0\1\13\7\0\13\13"+
    "\1\0\1\13\4\0\15\13\1\327\12\13\21\0\5\13"+
    "\2\0\1\13\7\0\13\13\1\0\1\13\4\0\4\13"+
    "\1\330\23\13\21\0\5\13\2\0\1\13\7\0\13\13"+
    "\1\0\1\13\4\0\20\13\1\331\7\13\21\0\5\13"+
    "\2\0\1\13\7\0\13\13\1\0\1\13\4\0\2\13"+
    "\1\332\25\13\21\0\5\13\2\0\1\13\7\0\13\13"+
    "\1\0\1\13\4\0\14\13\1\333\13\13\21\0\5\13"+
    "\2\0\1\13\7\0\13\13\1\0\1\13\4\0\6\13"+
    "\1\334\21\13\21\0\5\13\2\0\1\13\7\0\13\13"+
    "\1\0\1\13\4\0\1\13\1\335\26\13\21\0\5\13"+
    "\2\0\1\13\7\0\13\13\1\0\1\13\4\0\12\13"+
    "\1\336\15\13\21\0\5\13\2\0\1\13\7\0\13\13"+
    "\1\0\1\13\4\0\3\13\1\337\24\13\21\0\5\13"+
    "\2\0\1\13\11\0\2\340\1\102\1\0\5\340\1\0"+
    "\1\340\4\0\2\340\4\0\1\102\1\0\1\340\1\0"+
    "\1\340\4\0\2\340\30\0\5\340\14\0\1\341\1\101"+
    "\1\102\2\0\3\341\1\107\1\110\1\111\5\0\1\111"+
    "\4\0\1\102\10\0\2\107\30\0\3\341\1\101\1\341"+
    "\14\0\1\342\1\101\1\102\2\0\3\342\1\107\1\110"+
    "\1\111\5\0\1\111\4\0\1\102\10\0\2\107\30\0"+
    "\3\342\1\101\1\342\107\0\1\343\13\0\13\13\1\0"+
    "\1\13\4\0\16\13\1\344\11\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\15\13\1\345"+
    "\12\13\21\0\5\13\2\0\1\13\7\0\13\13\1\0"+
    "\1\13\4\0\14\13\1\346\13\13\21\0\5\13\2\0"+
    "\1\13\7\0\13\13\1\0\1\13\4\0\5\13\1\347"+
    "\22\13\21\0\5\13\2\0\1\13\11\0\2\350\1\102"+
    "\1\0\5\350\1\0\1\350\4\0\2\350\4\0\1\102"+
    "\1\0\1\350\1\0\1\350\4\0\2\350\30\0\5\350"+
    "\14\0\1\351\1\101\1\102\2\0\3\351\1\107\1\110"+
    "\1\111\5\0\1\111\4\0\1\102\10\0\2\107\30\0"+
    "\3\351\1\101\1\351\14\0\1\352\1\101\1\102\2\0"+
    "\3\352\1\107\1\110\1\111\5\0\1\111\4\0\1\102"+
    "\10\0\2\107\30\0\3\352\1\101\1\352\21\0\1\353"+
    "\101\0\13\13\1\0\1\13\4\0\1\13\1\354\26\13"+
    "\21\0\5\13\2\0\1\13\7\0\13\13\1\0\1\13"+
    "\4\0\4\13\1\355\23\13\21\0\5\13\2\0\1\13"+
    "\11\0\2\356\1\102\1\0\5\356\1\0\1\356\4\0"+
    "\2\356\4\0\1\102\1\0\1\356\1\0\1\356\4\0"+
    "\2\356\30\0\5\356\14\0\1\357\1\101\1\102\2\0"+
    "\3\357\1\107\1\110\1\111\5\0\1\111\4\0\1\102"+
    "\10\0\2\107\30\0\3\357\1\101\1\357\14\0\1\360"+
    "\1\101\1\102\2\0\3\360\1\107\1\110\1\111\5\0"+
    "\1\111\4\0\1\102\10\0\2\107\30\0\3\360\1\101"+
    "\1\360\110\0\1\361\14\0\2\362\1\102\1\0\5\362"+
    "\1\0\1\362\4\0\2\362\4\0\1\102\1\0\1\362"+
    "\1\0\1\362\4\0\2\362\30\0\5\362\14\0\1\363"+
    "\1\101\1\102\2\0\3\363\1\107\1\110\1\111\5\0"+
    "\1\111\4\0\1\102\10\0\2\107\30\0\3\363\1\101"+
    "\1\363\14\0\1\364\1\101\1\102\2\0\3\364\1\107"+
    "\1\110\1\111\5\0\1\111\4\0\1\102\10\0\2\107"+
    "\30\0\3\364\1\101\1\364\105\0\1\365\17\0\2\366"+
    "\1\102\1\0\5\366\1\0\1\366\4\0\2\366\4\0"+
    "\1\102\1\0\1\366\1\0\1\366\4\0\2\366\30\0"+
    "\5\366\14\0\1\367\1\101\1\102\2\0\3\367\1\107"+
    "\1\110\1\111\5\0\1\111\4\0\1\102\10\0\2\107"+
    "\30\0\3\367\1\101\1\367\14\0\1\370\1\101\1\102"+
    "\2\0\3\370\1\107\1\110\1\111\5\0\1\111\4\0"+
    "\1\102\10\0\2\107\30\0\3\370\1\101\1\370\107\0"+
    "\1\371\15\0\2\372\1\102\1\0\5\372\1\0\1\372"+
    "\4\0\2\372\4\0\1\102\1\0\1\372\1\0\1\372"+
    "\4\0\2\372\30\0\5\372\14\0\1\373\1\101\1\102"+
    "\2\0\3\373\1\107\1\110\1\111\5\0\1\111\4\0"+
    "\1\102\10\0\2\107\30\0\3\373\1\101\1\373\14\0"+
    "\1\374\1\101\1\102\2\0\3\374\1\107\1\110\1\111"+
    "\5\0\1\111\4\0\1\102\10\0\2\107\30\0\3\374"+
    "\1\101\1\374\14\0\2\375\1\102\1\0\5\375\1\0"+
    "\1\375\4\0\2\375\4\0\1\102\1\0\1\375\1\0"+
    "\1\375\4\0\2\375\30\0\5\375\14\0\1\376\1\101"+
    "\1\102\2\0\3\376\1\107\1\110\1\111\5\0\1\111"+
    "\4\0\1\102\10\0\2\107\30\0\3\376\1\101\1\376"+
    "\14\0\1\377\1\101\1\102\2\0\3\377\1\107\1\110"+
    "\1\111\5\0\1\111\4\0\1\102\10\0\2\107\30\0"+
    "\3\377\1\101\1\377\14\0\2\u0100\1\102\1\0\5\u0100"+
    "\1\0\1\u0100\4\0\2\u0100\4\0\1\102\1\0\1\u0100"+
    "\1\0\1\u0100\4\0\2\u0100\30\0\5\u0100\14\0\1\u0101"+
    "\1\101\1\102\2\0\3\u0101\1\107\1\110\1\111\5\0"+
    "\1\111\4\0\1\102\10\0\2\107\30\0\3\u0101\1\101"+
    "\1\u0101\14\0\1\u0102\1\101\1\102\2\0\3\u0102\1\107"+
    "\1\110\1\111\5\0\1\111\4\0\1\102\10\0\2\107"+
    "\30\0\3\u0102\1\101\1\u0102\14\0\2\u0103\1\102\1\0"+
    "\5\u0103\1\0\1\u0103\4\0\2\u0103\4\0\1\102\1\0"+
    "\1\u0103\1\0\1\u0103\4\0\2\u0103\30\0\5\u0103\14\0"+
    "\1\u0104\1\101\1\102\2\0\3\u0104\1\107\1\110\1\111"+
    "\5\0\1\111\4\0\1\102\10\0\2\107\30\0\3\u0104"+
    "\1\101\1\u0104\14\0\1\u0105\1\101\1\102\2\0\3\u0105"+
    "\1\107\1\110\1\111\5\0\1\111\4\0\1\102\10\0"+
    "\2\107\30\0\3\u0105\1\101\1\u0105\14\0\2\u0106\1\102"+
    "\1\0\5\u0106\1\0\1\u0106\4\0\2\u0106\4\0\1\102"+
    "\1\0\1\u0106\1\0\1\u0106\4\0\2\u0106\30\0\5\u0106"+
    "\14\0\1\u0107\1\101\1\102\2\0\3\u0107\1\107\1\110"+
    "\1\111\5\0\1\111\4\0\1\102\10\0\2\107\30\0"+
    "\3\u0107\1\101\1\u0107\14\0\1\u0108\1\101\1\102\2\0"+
    "\3\u0108\1\107\1\110\1\111\5\0\1\111\4\0\1\102"+
    "\10\0\2\107\30\0\3\u0108\1\101\1\u0108\14\0\2\u0109"+
    "\1\102\1\0\5\u0109\1\0\1\u0109\4\0\2\u0109\4\0"+
    "\1\102\1\0\1\u0109\1\0\1\u0109\4\0\2\u0109\30\0"+
    "\5\u0109\14\0\1\u010a\1\101\1\102\2\0\3\u010a\1\107"+
    "\1\110\1\111\5\0\1\111\4\0\1\102\10\0\2\107"+
    "\30\0\3\u010a\1\101\1\u010a\14\0\1\u010b\1\101\1\102"+
    "\2\0\3\u010b\1\107\1\110\1\111\5\0\1\111\4\0"+
    "\1\102\10\0\2\107\30\0\3\u010b\1\101\1\u010b\14\0"+
    "\2\u010c\1\102\1\0\5\u010c\1\0\1\u010c\4\0\2\u010c"+
    "\4\0\1\102\1\0\1\u010c\1\0\1\u010c\4\0\2\u010c"+
    "\30\0\5\u010c\14\0\1\u010d\1\101\1\102\2\0\3\u010d"+
    "\1\107\1\110\1\111\5\0\1\111\4\0\1\102\10\0"+
    "\2\107\30\0\3\u010d\1\101\1\u010d\16\0\1\102\22\0"+
    "\1\102\63\0\1\u010e\1\101\1\102\2\0\3\u010e\1\107"+
    "\1\110\1\111\5\0\1\111\4\0\1\102\10\0\2\107"+
    "\30\0\3\u010e\1\101\1\u010e\14\0\1\u010f\1\101\1\102"+
    "\2\0\3\u010f\1\107\1\110\1\111\5\0\1\111\4\0"+
    "\1\102\10\0\2\107\30\0\3\u010f\1\101\1\u010f\14\0"+
    "\1\u0110\1\101\1\102\2\0\3\u0110\1\107\1\110\1\111"+
    "\5\0\1\111\4\0\1\102\10\0\2\107\30\0\3\u0110"+
    "\1\101\1\u0110\14\0\1\u0111\1\101\1\102\2\0\3\u0111"+
    "\1\107\1\110\1\111\5\0\1\111\4\0\1\102\10\0"+
    "\2\107\30\0\3\u0111\1\101\1\u0111\14\0\2\101\1\102"+
    "\2\0\3\101\1\107\1\110\1\111\5\0\1\111\4\0"+
    "\1\102\10\0\2\107\30\0\5\101\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14819];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\10\1\2\11\20\1\6\11"+
    "\3\1\2\11\2\1\4\11\2\1\2\11\3\1\1\11"+
    "\1\1\1\0\1\11\1\1\1\11\2\1\1\11\1\0"+
    "\3\1\1\11\1\1\1\0\2\11\1\0\37\1\10\11"+
    "\1\1\2\0\1\1\1\11\5\1\2\0\35\1\1\0"+
    "\3\1\1\0\34\1\1\0\24\1\1\0\17\1\1\0"+
    "\7\1\1\0\5\1\1\0\3\1\2\0\2\1\1\11"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

public Symbol symbol( int tokenType ) {
    System.err.println( "Obtain token " + tokenType + " \"" + yytext() + "\"" );
    return new Symbol( tokenType, yyline , yycolumn );
}
public Symbol symbol( int tokenType , Object val ) {
    System.err.println( "Obtain token " + tokenType + " \"" + val + "\"" );
    return new Symbol( tokenType, yyline , yycolumn,val );
}
StringBuilder string=new StringBuilder();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2900) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal Variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF,yytext());
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 82: break;
          case 2: 
            { /* return symbol(sym.NEW_LINE,yytext()); */
            } 
            // fall through
          case 83: break;
          case 3: 
            { //return symbol(sym.WHITE_CHAR,yytext());
            } 
            // fall through
          case 84: break;
          case 4: 
            { return symbol(sym.DIV,yytext());
            } 
            // fall through
          case 85: break;
          case 5: 
            { return symbol(sym.MULT,yytext());
            } 
            // fall through
          case 86: break;
          case 6: 
            { return symbol(sym.IDENTIFIER,yytext());
            } 
            // fall through
          case 87: break;
          case 7: 
            { return symbol(sym.INTEGER_LITERAL,yytext());
            } 
            // fall through
          case 88: break;
          case 8: 
            { return symbol(sym.DOT,yytext());
            } 
            // fall through
          case 89: break;
          case 9: 
            { return symbol(sym.MINUS,yytext());
            } 
            // fall through
          case 90: break;
          case 10: 
            { yybegin(STRING);string.setLength(0); string.append("\"");
            } 
            // fall through
          case 91: break;
          case 11: 
            { yybegin(CHARLITERAL);
            } 
            // fall through
          case 92: break;
          case 12: 
            { return symbol(sym.LPAREN,yytext());
            } 
            // fall through
          case 93: break;
          case 13: 
            { return symbol(sym.RPAREN,yytext());
            } 
            // fall through
          case 94: break;
          case 14: 
            { return symbol(sym.LBRACK,yytext());
            } 
            // fall through
          case 95: break;
          case 15: 
            { return symbol(sym.RBRACK,yytext());
            } 
            // fall through
          case 96: break;
          case 16: 
            { return symbol(sym.SEMICOLON,yytext());
            } 
            // fall through
          case 97: break;
          case 17: 
            { return symbol(sym.COMMA,yytext());
            } 
            // fall through
          case 98: break;
          case 18: 
            { return symbol(sym.EQ,yytext());
            } 
            // fall through
          case 99: break;
          case 19: 
            { return symbol(sym.GT,yytext());
            } 
            // fall through
          case 100: break;
          case 20: 
            { return symbol(sym.LT,yytext());
            } 
            // fall through
          case 101: break;
          case 21: 
            { return symbol(sym.COMP,yytext());
            } 
            // fall through
          case 102: break;
          case 22: 
            { return symbol(sym.COLON,yytext());
            } 
            // fall through
          case 103: break;
          case 23: 
            { return symbol(sym.PLUS,yytext());
            } 
            // fall through
          case 104: break;
          case 24: 
            { return symbol(sym.AND,yytext());
            } 
            // fall through
          case 105: break;
          case 25: 
            { return symbol(sym.OR,yytext());
            } 
            // fall through
          case 106: break;
          case 26: 
            { return symbol(sym.XOR,yytext());
            } 
            // fall through
          case 107: break;
          case 27: 
            { return symbol(sym.MOD,yytext());
            } 
            // fall through
          case 108: break;
          case 28: 
            { string.append( yytext() );
            } 
            // fall through
          case 109: break;
          case 29: 
            { throw new RuntimeException("Unterminated string at end of line");
            } 
            // fall through
          case 110: break;
          case 30: 
            { yybegin(YYINITIAL); StringBuilder temp = string ; string = new StringBuilder(); return symbol(sym.STRING_LITERAL, temp.toString() );
            } 
            // fall through
          case 111: break;
          case 31: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            } 
            // fall through
          case 112: break;
          case 32: 
            { return symbol(sym.DIVEQ,yytext());
            } 
            // fall through
          case 113: break;
          case 33: 
            { /*return symbol(sym.COMMENT,yytext());*/
            } 
            // fall through
          case 114: break;
          case 34: 
            { return symbol(sym.MULTEQ,yytext());
            } 
            // fall through
          case 115: break;
          case 35: 
            { return symbol(sym.REAL_LITERAL,yytext());
            } 
            // fall through
          case 116: break;
          case 36: 
            { return symbol(sym.LONG_LITERAL,yytext());
            } 
            // fall through
          case 117: break;
          case 37: 
            { return symbol(sym.MINUSMINUS,yytext());
            } 
            // fall through
          case 118: break;
          case 38: 
            { return symbol(sym.MINUSEQ,yytext());
            } 
            // fall through
          case 119: break;
          case 39: 
            { return symbol(sym.IF,yytext());
            } 
            // fall through
          case 120: break;
          case 40: 
            { return symbol(sym.OROR,yytext());
            } 
            // fall through
          case 121: break;
          case 41: 
            { return symbol(sym.OF,yytext());
            } 
            // fall through
          case 122: break;
          case 42: 
            { return symbol(sym.IN,yytext());
            } 
            // fall through
          case 123: break;
          case 43: 
            { return symbol(sym.EQEQ,yytext());
            } 
            // fall through
          case 124: break;
          case 44: 
            { return symbol(sym.GTEQ,yytext());
            } 
            // fall through
          case 125: break;
          case 45: 
            { return symbol(sym.LTEQ,yytext());
            } 
            // fall through
          case 126: break;
          case 46: 
            { return symbol(sym.NOTEQ,yytext());
            } 
            // fall through
          case 127: break;
          case 47: 
            { return symbol(sym.PLUSEQ,yytext());
            } 
            // fall through
          case 128: break;
          case 48: 
            { return symbol(sym.PLUSPLUS,yytext());
            } 
            // fall through
          case 129: break;
          case 49: 
            { string.append(yytext()  );
            } 
            // fall through
          case 130: break;
          case 50: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, yytext() );
            } 
            // fall through
          case 131: break;
          case 51: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            } 
            // fall through
          case 132: break;
          case 52: 
            { return symbol(sym.END,yytext());
            } 
            // fall through
          case 133: break;
          case 53: 
            { return symbol(sym.INT,yytext());
            } 
            // fall through
          case 134: break;
          case 54: 
            { return symbol(sym.NOT,yytext());
            } 
            // fall through
          case 135: break;
          case 55: 
            { return symbol(sym.ANDAND,yytext());
            } 
            // fall through
          case 136: break;
          case 56: 
            { return symbol(sym.FOR,yytext());
            } 
            // fall through
          case 137: break;
          case 57: 
            { return symbol(sym.BOOL,yytext());
            } 
            // fall through
          case 138: break;
          case 58: 
            { return symbol(sym.ELSE,yytext());
            } 
            // fall through
          case 139: break;
          case 59: 
            { return symbol(sym.LONG,yytext());
            } 
            // fall through
          case 140: break;
          case 60: 
            { return symbol(sym.AUTO,yytext());
            } 
            // fall through
          case 141: break;
          case 61: 
            { return symbol(sym.CASE,yytext());
            } 
            // fall through
          case 142: break;
          case 62: 
            { return symbol(sym.CHAR,yytext());
            } 
            // fall through
          case 143: break;
          case 63: 
            { return symbol(sym.BOOLEAN_LITERAL,yytext());
            } 
            // fall through
          case 144: break;
          case 64: 
            { return symbol(sym.VOID,yytext());
            } 
            // fall through
          case 145: break;
          case 65: 
            { return symbol(sym.BEGIN,yytext());
            } 
            // fall through
          case 146: break;
          case 66: 
            { return symbol(sym.BREAK,yytext());
            } 
            // fall through
          case 147: break;
          case 67: 
            { return symbol(sym.CONST,yytext());
            } 
            // fall through
          case 148: break;
          case 68: 
            { return symbol(sym.UNTIL,yytext());
            } 
            // fall through
          case 149: break;
          case 69: 
            { return symbol(sym.FLOAT,yytext());
            } 
            // fall through
          case 150: break;
          case 70: 
            { return symbol(sym.EXTERN,yytext());
            } 
            // fall through
          case 151: break;
          case 71: 
            { return symbol(sym.RECORD,yytext());
            } 
            // fall through
          case 152: break;
          case 72: 
            { return symbol(sym.RETURN,yytext());
            } 
            // fall through
          case 153: break;
          case 73: 
            { return symbol(sym.REPEAT,yytext());
            } 
            // fall through
          case 154: break;
          case 74: 
            { return symbol(sym.SIZEOF,yytext());
            } 
            // fall through
          case 155: break;
          case 75: 
            { return symbol(sym.STRING,yytext());
            } 
            // fall through
          case 156: break;
          case 76: 
            { return symbol(sym.SWITCH,yytext());
            } 
            // fall through
          case 157: break;
          case 77: 
            { return symbol(sym.DOUBLE,yytext());
            } 
            // fall through
          case 158: break;
          case 78: 
            { return symbol(sym.DEFAULT,yytext());
            } 
            // fall through
          case 159: break;
          case 79: 
            { return symbol(sym.FOREACH,yytext());
            } 
            // fall through
          case 160: break;
          case 80: 
            { return symbol(sym.CONTINUE,yytext());
            } 
            // fall through
          case 161: break;
          case 81: 
            { return symbol(sym.FUNCTION,yytext());
            } 
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
